/**
 * 模板方法模式（Template Method）--算法框架--用户实现某些特有内容
 * 一、模板方法模式的实现要素
 * 1-抽象基类
 * （1）基本方法
 * （2）抽象方法
 * （3）可选的钩子
 * （4）Template方法（final,阻止子类改变父类方法）
 *   ----好莱坞原则
 *       Don't call us! We will call you.
 * 2-具体子类
 * （1）实现基类中的抽象方法
 * （2）覆盖钩子方法
 * 二、模板方法模式说明
 * 1-模板方法模式的实现要素
 * 准备一个抽象类，将部分逻辑以具体方法的形式实现，然后
 * 声明一些抽象方法交由子类实现剩余逻辑，用钩子方法给予子类更大的灵活性。
 * 最后将方法汇总构成一个不可改变的模板方法。
 *
 * 2-模板方法模式的使用场景
 * --算法或操作遵循相似的逻辑
 * --重构时（把相同的代码抽取到父类中）
 * --重要、复杂的算法，核心算法设计为模板算法
 *
 * 3-模板方法模式的优点
 * --封装性好
 * --复用性好
 * --屏蔽细节
 * --便于维护
 *
 * 4-模板方法模式的缺点
 * --继承
 *
 * 三、模板方法模式的实际应用
 * 1-行业案例
 * --需求分析
 *     种类繁多数量巨大的日志
 *
 *     打开文件
 *     读取日志结构
 *     处理单行日志
 *     清理工作
 *
 * @Author : Huang Vector ( hgw )
 * @Date : 2018-6-6 9:10
 */
package cn.vector.pattern.template;